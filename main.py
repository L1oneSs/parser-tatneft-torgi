import httpx
from bs4 import BeautifulSoup
import pandas as pd
import telebot
from telebot import types
from config import BOT_TOKEN

TOKEN = BOT_TOKEN
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
messages = []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    btn_get_data = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    btn_clear_chat = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç')
    markup.add(btn_get_data, btn_clear_chat)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏–ª–∏ '–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
def fetch_data(message):
    url = 'https://torgi.tatneft.ru/torgi/'

    # –í—ã–ø–æ–ª–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
    try:
        response = httpx.get(url, verify=False)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')

            table = soup.find('table', class_='lot-list-table')

            if table:
                headers = [th.get_text(strip=True) for th in table.find('tr').find_all('th')]
                headers.append('–°—Å—ã–ª–∫–∞')

                data = []

                rows = table.find_all('tr', class_='lot-list-row')
                for row in rows:
                    cols = row.find_all('td')
                    if len(cols) == 8:
                        number = cols[0].get_text(strip=True)
                        category = cols[1].get_text(strip=True)
                        title_tag = cols[2].find('a')
                        title = title_tag.get_text(strip=True)
                        link = title_tag['href'] if title_tag else ''
                        status = cols[3].get_text(strip=True)
                        publish_date = cols[4].get_text(strip=True)
                        start_price = cols[5].get_text(strip=True)
                        start_date = cols[6].get_text(strip=True)
                        end_date = cols[7].get_text(strip=True)

                        if category == '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞' and status.lower() != '—Ç–æ—Ä–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã':
                            data.append(
                                [number, category, title, status, publish_date, start_price, start_date, end_date,
                                 link])

                df = pd.DataFrame(data, columns=headers)

                global messages
                messages = []  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö

                for index, row in df.iterrows():
                    number = row['‚Ññ']
                    auto = row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].split(',')[0]
                    reg_number = row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].split('—Ä–µ–≥. –Ω–æ–º–µ—Ä ')[1] if '—Ä–µ–≥. –Ω–æ–º–µ—Ä ' in row[
                        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] else '–ù–µ —É–∫–∞–∑–∞–Ω'
                    status = row['–°–æ—Å—Ç–æ—è–Ω–∏–µ']
                    publish_date = row['–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏']
                    start_date = row['–ù–∞—á–∞–ª–æ']
                    end_date = row['–û–∫–æ–Ω—á–∞–Ω–∏–µ']
                    link = row['–°—Å—ã–ª–∫–∞']

                    message_text = (
                        f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {auto}\n"
                        f"üîé –†–µ–≥.–ù–æ–º–µ—Ä: {reg_number}\n\n"
                        f"üî¢ ‚Ññ –õ–æ—Ç–∞: {number}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤: {status}\n"
                        f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_date}\n"
                        f"üïí –ù–∞—á–∞–ª–æ: {start_date}\n"
                        f"üïõ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: https://torgi.tatneft.ru/torgi/{link}"
                    )

                    sent_message = bot.send_message(message.chat.id, message_text)
                    messages.append(sent_message.message_id)  # –°–æ—Ö—Ä–∞–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è

            else:
                bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ —Å –∫–ª–∞—Å—Å–æ–º 'lot-list-table' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É: {response.status_code}")
    except httpx.HTTPStatusError as exc:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ HTTP: {exc}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç')
def clear_chat(message):

    global messages
    for msg_id in messages:
        try:
            bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    messages = []  # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π


bot.polling(none_stop=True)
